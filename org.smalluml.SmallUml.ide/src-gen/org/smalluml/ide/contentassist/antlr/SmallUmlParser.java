/*
 * generated by Xtext 2.10.0
 */
package org.smalluml.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.smalluml.ide.contentassist.antlr.internal.InternalSmallUmlParser;
import org.smalluml.services.SmallUmlGrammarAccess;

public class SmallUmlParser extends AbstractContentAssistParser {

	@Inject
	private SmallUmlGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSmallUmlParser createParser() {
		InternalSmallUmlParser result = new InternalSmallUmlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getType_ImplAccess().getGroup(), "rule__Type_Impl__Group__0");
					put(grammarAccess.getRealAccess().getGroup(), "rule__Real__Group__0");
					put(grammarAccess.getIntegerAccess().getGroup(), "rule__Integer__Group__0");
					put(grammarAccess.getString0Access().getGroup(), "rule__String0__Group__0");
					put(grammarAccess.getInfinityAccess().getGroup(), "rule__Infinity__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup(), "rule__Enumeration__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup_6(), "rule__Enumeration__Group_6__0");
					put(grammarAccess.getAttributeAccess().getNameAssignment_1(), "rule__Attribute__NameAssignment_1");
					put(grammarAccess.getAttributeAccess().getTypenameAssignment_4(), "rule__Attribute__TypenameAssignment_4");
					put(grammarAccess.getType_ImplAccess().getNameAssignment_2(), "rule__Type_Impl__NameAssignment_2");
					put(grammarAccess.getRealAccess().getNameAssignment_2(), "rule__Real__NameAssignment_2");
					put(grammarAccess.getIntegerAccess().getNameAssignment_2(), "rule__Integer__NameAssignment_2");
					put(grammarAccess.getString0Access().getNameAssignment_2(), "rule__String0__NameAssignment_2");
					put(grammarAccess.getInfinityAccess().getNameAssignment_2(), "rule__Infinity__NameAssignment_2");
					put(grammarAccess.getEnumerationAccess().getNameAssignment_1(), "rule__Enumeration__NameAssignment_1");
					put(grammarAccess.getEnumerationAccess().getValueAssignment_5(), "rule__Enumeration__ValueAssignment_5");
					put(grammarAccess.getEnumerationAccess().getValueAssignment_6_1(), "rule__Enumeration__ValueAssignment_6_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSmallUmlParser typedParser = (InternalSmallUmlParser) parser;
			typedParser.entryRuleAttribute();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SmallUmlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SmallUmlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
