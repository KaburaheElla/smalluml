/*
 * generated by Xtext 2.10.0
 */
grammar InternalSmallUml;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.smalluml.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.smalluml.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.smalluml.services.SmallUmlGrammarAccess;

}
@parser::members {
	private SmallUmlGrammarAccess grammarAccess;

	public void setGrammarAccess(SmallUmlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getGroup()); }
		(rule__Attribute__Group__0)
		{ after(grammarAccess.getAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType_Impl
entryRuleType_Impl
:
{ before(grammarAccess.getType_ImplRule()); }
	 ruleType_Impl
{ after(grammarAccess.getType_ImplRule()); } 
	 EOF 
;

// Rule Type_Impl
ruleType_Impl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getType_ImplAccess().getGroup()); }
		(rule__Type_Impl__Group__0)
		{ after(grammarAccess.getType_ImplAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReal
entryRuleReal
:
{ before(grammarAccess.getRealRule()); }
	 ruleReal
{ after(grammarAccess.getRealRule()); } 
	 EOF 
;

// Rule Real
ruleReal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealAccess().getGroup()); }
		(rule__Real__Group__0)
		{ after(grammarAccess.getRealAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInteger
entryRuleInteger
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerAccess().getGroup()); }
		(rule__Integer__Group__0)
		{ after(grammarAccess.getIntegerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleString0
entryRuleString0
:
{ before(grammarAccess.getString0Rule()); }
	 ruleString0
{ after(grammarAccess.getString0Rule()); } 
	 EOF 
;

// Rule String0
ruleString0 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getString0Access().getGroup()); }
		(rule__String0__Group__0)
		{ after(grammarAccess.getString0Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInfinity
entryRuleInfinity
:
{ before(grammarAccess.getInfinityRule()); }
	 ruleInfinity
{ after(grammarAccess.getInfinityRule()); } 
	 EOF 
;

// Rule Infinity
ruleInfinity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInfinityAccess().getGroup()); }
		(rule__Infinity__Group__0)
		{ after(grammarAccess.getInfinityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumeration
entryRuleEnumeration
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerationAccess().getGroup()); }
		(rule__Enumeration__Group__0)
		{ after(grammarAccess.getEnumerationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getType_ImplParserRuleCall_0()); }
		ruleType_Impl
		{ after(grammarAccess.getTypeAccess().getType_ImplParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getRealParserRuleCall_1()); }
		ruleReal
		{ after(grammarAccess.getTypeAccess().getRealParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getIntegerParserRuleCall_2()); }
		ruleInteger
		{ after(grammarAccess.getTypeAccess().getIntegerParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getString0ParserRuleCall_3()); }
		ruleString0
		{ after(grammarAccess.getTypeAccess().getString0ParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getInfinityParserRuleCall_4()); }
		ruleInfinity
		{ after(grammarAccess.getTypeAccess().getInfinityParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getEnumerationParserRuleCall_5()); }
		ruleEnumeration
		{ after(grammarAccess.getTypeAccess().getEnumerationParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__0__Impl
	rule__Attribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getAttributeKeyword_0()); }
	'Attribute'
	{ after(grammarAccess.getAttributeAccess().getAttributeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__1__Impl
	rule__Attribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
	(rule__Attribute__NameAssignment_1)
	{ after(grammarAccess.getAttributeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__2__Impl
	rule__Attribute__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getAttributeAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__3__Impl
	rule__Attribute__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getTypenameKeyword_3()); }
	'typename'
	{ after(grammarAccess.getAttributeAccess().getTypenameKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__4__Impl
	rule__Attribute__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getTypenameAssignment_4()); }
	(rule__Attribute__TypenameAssignment_4)
	{ after(grammarAccess.getAttributeAccess().getTypenameAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Attribute__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getAttributeAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Type_Impl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type_Impl__Group__0__Impl
	rule__Type_Impl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type_Impl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getType_ImplAccess().getTypeAction_0()); }
	()
	{ after(grammarAccess.getType_ImplAccess().getTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type_Impl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type_Impl__Group__1__Impl
	rule__Type_Impl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type_Impl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getType_ImplAccess().getTypeKeyword_1()); }
	'Type'
	{ after(grammarAccess.getType_ImplAccess().getTypeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type_Impl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Type_Impl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type_Impl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getType_ImplAccess().getNameAssignment_2()); }
	(rule__Type_Impl__NameAssignment_2)
	{ after(grammarAccess.getType_ImplAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Real__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Real__Group__0__Impl
	rule__Real__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealAccess().getRealAction_0()); }
	()
	{ after(grammarAccess.getRealAccess().getRealAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Real__Group__1__Impl
	rule__Real__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealAccess().getRealKeyword_1()); }
	'Real'
	{ after(grammarAccess.getRealAccess().getRealKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Real__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealAccess().getNameAssignment_2()); }
	(rule__Real__NameAssignment_2)
	{ after(grammarAccess.getRealAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group__0__Impl
	rule__Integer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getIntegerAction_0()); }
	()
	{ after(grammarAccess.getIntegerAccess().getIntegerAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group__1__Impl
	rule__Integer__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getIntegerKeyword_1()); }
	'Integer'
	{ after(grammarAccess.getIntegerAccess().getIntegerKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getNameAssignment_2()); }
	(rule__Integer__NameAssignment_2)
	{ after(grammarAccess.getIntegerAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__String0__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__String0__Group__0__Impl
	rule__String0__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getString0Access().getStringAction_0()); }
	()
	{ after(grammarAccess.getString0Access().getStringAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__String0__Group__1__Impl
	rule__String0__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getString0Access().getStringKeyword_1()); }
	'String'
	{ after(grammarAccess.getString0Access().getStringKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__String0__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getString0Access().getNameAssignment_2()); }
	(rule__String0__NameAssignment_2)
	{ after(grammarAccess.getString0Access().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Infinity__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Infinity__Group__0__Impl
	rule__Infinity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Infinity__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInfinityAccess().getInfinityAction_0()); }
	()
	{ after(grammarAccess.getInfinityAccess().getInfinityAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Infinity__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Infinity__Group__1__Impl
	rule__Infinity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Infinity__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInfinityAccess().getInfinityKeyword_1()); }
	'Infinity'
	{ after(grammarAccess.getInfinityAccess().getInfinityKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Infinity__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Infinity__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Infinity__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInfinityAccess().getNameAssignment_2()); }
	(rule__Infinity__NameAssignment_2)
	{ after(grammarAccess.getInfinityAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__0__Impl
	rule__Enumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getEnumerationKeyword_0()); }
	'Enumeration'
	{ after(grammarAccess.getEnumerationAccess().getEnumerationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__1__Impl
	rule__Enumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getNameAssignment_1()); }
	(rule__Enumeration__NameAssignment_1)
	{ after(grammarAccess.getEnumerationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__2__Impl
	rule__Enumeration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__3__Impl
	rule__Enumeration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getValueKeyword_3()); }
	'value'
	{ after(grammarAccess.getEnumerationAccess().getValueKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__4__Impl
	rule__Enumeration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__5__Impl
	rule__Enumeration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getValueAssignment_5()); }
	(rule__Enumeration__ValueAssignment_5)
	{ after(grammarAccess.getEnumerationAccess().getValueAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__6__Impl
	rule__Enumeration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getGroup_6()); }
	(rule__Enumeration__Group_6__0)*
	{ after(grammarAccess.getEnumerationAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__7__Impl
	rule__Enumeration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group_6__0__Impl
	rule__Enumeration__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getCommaKeyword_6_0()); }
	','
	{ after(grammarAccess.getEnumerationAccess().getCommaKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getValueAssignment_6_1()); }
	(rule__Enumeration__ValueAssignment_6_1)
	{ after(grammarAccess.getEnumerationAccess().getValueAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Attribute__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getAttributeAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__TypenameAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getTypenameTypeParserRuleCall_4_0()); }
		ruleType
		{ after(grammarAccess.getAttributeAccess().getTypenameTypeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type_Impl__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getType_ImplAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getType_ImplAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Real__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getRealAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getIntegerAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__String0__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getString0Access().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getString0Access().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Infinity__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInfinityAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getInfinityAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getEnumerationAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__ValueAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getValueString0ParserRuleCall_5_0()); }
		ruleString0
		{ after(grammarAccess.getEnumerationAccess().getValueString0ParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__ValueAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getValueString0ParserRuleCall_6_1_0()); }
		ruleString0
		{ after(grammarAccess.getEnumerationAccess().getValueString0ParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
